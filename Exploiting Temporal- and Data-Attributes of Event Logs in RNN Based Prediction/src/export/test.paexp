Include("D:\\dev\\aalto\\papers\\nn-predictions-extended\\src\\train.paexp");
Include("D:\\dev\\aalto\\papers\\nn-predictions-extended\\src\\export.paexp");
Include("D:\\dev\\aalto\\papers\\nn-predictions-extended\\src\\predict.paexp");
Include("D:\\dev\\aalto\\papers\\nn-predictions-extended\\src\\analyze.paexp");

Def("SplitLog", "percentage", (
  Let("orderedCases", OrderBy(Cases, StartTime)),
  Let("firstTestId", percentage * Count(orderedCases)),
  If(firstTestId < Count(orderedCases) - 1, (
      Let("firstTest", orderedCases[firstTestId]),
      Let("trainSet", orderedCases[NumberRange(0, firstTestId - 1)].Where(EndTime < firstTest.StartTime)),
      Let("testSet", orderedCases[NumberRange(firstTestId, Count(orderedCases) - 1)]),
      WriteLog("Event log split into two partitions: Training set size: " + ToString(Count(trainSet)) + ", Test set size: " + ToString(Count(testSet))),
      [trainSet, testSet]
	),
    [orderedCases, []]
  )
));

Def("CreateModelAndTest", "modelName", "fileNamePrefix", "percentage", "selectionExpression", "ignoredCaseAttributes", "ignoredEventAttributes", "customCaseAttributes", "outputFilename", (
  Let("el", EventLogByModelName(modelName)),
  Let("splitEl", el.SplitLog(percentage)),

  Let("trainData", el.Export(splitEl[0], selectionExpression, ignoredCaseAttributes, ignoredEventAttributes, customCaseAttributes)),
//  Let("trainData", el.Export(el.Cases, selectionExpression, ignoredCaseAttributes, ignoredEventAttributes, customCaseAttributes)),
  Let("trainedModel", Train(modelName, trainData)),
  
  Let("testData", el.ExportForPrediction(splitEl[1], selectionExpression, ignoredCaseAttributes, ignoredEventAttributes, customCaseAttributes)),
//  Let("testData", el.ExportForPrediction(el.Cases, selectionExpression, ignoredCaseAttributes, ignoredEventAttributes, customCaseAttributes)),
  Let("resultJson", Predict(trainedModel, modelName, testData, selectionExpression, outputFilename)),
  
  Let("csvResult", Analyze(resultJson, el, selectionExpression)),
  WriteFile(outputFilename, csvResult),
  csvResult
));

Def("CreateEventLogExports", "modelName", "fileNamePrefix", "percentage", "selectionExpression", "ignoredCaseAttributes", "ignoredEventAttributes", "customCaseAttributes", "outputDirectory", (
  Let("el", EventLogByModelName(modelName)),
  Let("splitEl", el.SplitLog(percentage)),

  Let("trainData", el.Export(splitEl[0], selectionExpression, ignoredCaseAttributes, ignoredEventAttributes, customCaseAttributes)),
  Let("testData", el.ExportForPrediction(splitEl[1], selectionExpression, ignoredCaseAttributes, ignoredEventAttributes, customCaseAttributes)),

  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-train.json", trainData),
  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-test.json", testData)
));

Def("CreateEventLogExportsForGeneratedCases", "modelName", "fileNamePrefix", "testSetPercentage", "caseGeneratorFunc", "ignoredCaseAttributes", "ignoredEventAttributes", "outputDirectory",(
  Let("el", EventLogByModelName(modelName)),
  Let("splitEl", el.SplitLog(testSetPercentage)),

  Let("trainData", el.ExportCustom(splitEl[0], ignoredCaseAttributes, ignoredEventAttributes, caseGeneratorFunc)),
  Let("testData", el.ExportCustom(splitEl[1], ignoredCaseAttributes, ignoredEventAttributes, caseGeneratorFunc)), 

  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-train.json", trainData),
  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-test.json", testData)
));

Def("CreateEventLogExportsForNextEventPrediction", "modelName", "fileNamePrefix", "testSetPercentage", "filterPercentage", "ignoredCaseAttributes", "ignoredEventAttributes", "outputDirectory",(
  Let("el", EventLogByModelName(modelName)),
  Let("splitEl", el.SplitLog(testSetPercentage)),

  Let("trainData", el.ExportCustom(splitEl[0], ignoredCaseAttributes, ignoredEventAttributes, Def("", "cases", "caseAttributes", "eventAttributes", GetCasesForEventTypePrediction(cases, caseAttributes, eventAttributes, 4, 0, filterPercentage)))),
  Let("testData", el.ExportCustom(splitEl[1], ignoredCaseAttributes, ignoredEventAttributes, Def("", "cases", "caseAttributes", "eventAttributes", GetCasesForEventTypePrediction(cases, caseAttributes, eventAttributes, 4, 0, filterPercentage)))),

  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-train.json", trainData),
  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-test.json", testData)
));

Def("CreateEventLogExportsForNextEventPredictionFinalOnly", "modelName", "fileNamePrefix", "testSetPercentage", "filterPercentage", "ignoredCaseAttributes", "ignoredEventAttributes", "outputDirectory",(
  Let("el", EventLogByModelName(modelName)),
  Let("splitEl", el.SplitLog(testSetPercentage)),

  Let("trainData", el.ExportCustom(splitEl[0], ignoredCaseAttributes, ignoredEventAttributes, Def("", "cases", "caseAttributes", "eventAttributes", GetCasesForEventTypePredictionFinalOnly(cases, caseAttributes, eventAttributes, filterPercentage)))),
  Let("testData", el.ExportCustom(splitEl[1], ignoredCaseAttributes, ignoredEventAttributes, Def("", "cases", "caseAttributes", "eventAttributes", GetCasesForEventTypePredictionFinalOnly(cases, caseAttributes, eventAttributes, filterPercentage)))),

  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-train.json", trainData),
  WriteFile(outputDirectory + "\\" + fileNamePrefix + "-test.json", testData)
));
