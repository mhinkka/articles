Def("GetCasesForEventTypePrediction", "cases", "caseAttributes", "eventAttributes", "minTraceLength", "maxTraceLengthOffset", "filterPercentage", (
	Let("result", (
		(
			cases.(
				Let("c", _),
				ToDictionary().Set(
					"n", c.Name,
					"a", (caseAttributes.(Let("attr", _), c.Attribute(attr))),
					"t", c.Events.(
						Let("e", _),
						Concat(
							e.Type.Id,
							e.TimeStamp,
							(eventAttributes.(Let("attr", _), e.Attribute(attr)))
						)
					)
				)
			)
		)
	)),
	Shuffle(result)[NumberRange(0, filterPercentage * (CountTop(result) - 1))]
));

Def("GetCasesForEventTypePredictionFinalOnly", "cases", "caseAttributes", "eventAttributes", "filterPercentage", (
	Let("result", (
		cases.(
			Let("c", _),
			ToDictionary().Set(
				"n", c.Name,
				"a", (caseAttributes.(Let("attr", _), c.Attribute(attr))),
				"t", c.Events.(
					Let("e", _),
					Concat(
						e.Type.Id,
						e.TimeStamp,
						(eventAttributes.(Let("attr", _), e.Attribute(attr)))
					)
				)
			)
		)
	)),
	Shuffle(result)[NumberRange(0, filterPercentage * (CountTop(result) - 1))]
));

Def("GetSimpleCasesForEventTypePrediction", "cases", "caseAttributes", "eventAttributes", (
	cases.(
		Let("c", _),
		ToDictionary().Set(
			"n", c.Name,
			"a", (caseAttributes.(Let("attr", _), c.Attribute(attr))),
			"t", c.Events.(
				Let("e", _),
				Concat(
					e.Type.Id,
					e.TimeStamp,
					(eventAttributes.(Let("attr", _), e.Attribute(attr)))
				)
			)
		)
	)
));

Def("GetCasesForPredictingEventTypeOccurrence", "cases", "caseAttributes", "eventAttributes", "eventTypeName", "minTraceLength", "filterPercentage", (
	Let("result",
		(
			cases.(
				Let("c", _),
				Let("len", Count(c.Events)),
				Let("evts", c.FirstEvent.(RecursiveFind(NextInCase, Type.Name != eventTypeName, !IsNull(_) && (Type.Name != eventTypeName), true, len - 1))),
				ToDictionary().Set(
					"n", c.Name,
					"s", c.Count(EventsByType(eventTypeName)) == 0,
					"a", (caseAttributes.(Let("attr", _), c.Attribute(attr))),
					"t", evts.(
						Let("e", _),
						Concat(
							e.Type.Id,
							e.TimeStamp,
							(eventAttributes.(Let("attr", _), e.Attribute(attr)))
						)
					)
				)
			)
		)
	),
	Shuffle(result)[NumberRange(0, filterPercentage * (CountTop(result) - 1))]
));

Def("Export", "cases", "caseSelectionCondition", "ignoredCaseAttributes", "ignoredEventAttributes", "customCaseAttributes", (
	Let("el", _),
	Let("caseAttributes", el.CaseAttributes.Where(Count(Intersect(ignoredCaseAttributes, [Name])) == 0)),
	Let("eventAttributes", el.EventAttributes.Where(Count(Intersect(ignoredEventAttributes, [Name])) == 0)),
	ToDictionary().Set(
		"activities", el.EventTypes.(
			Let("a", _),
			ToDictionary().Set(
				"name", a.Name,
				"id", a.Id
			)
		),
		"attributes", ToDictionary().Set(
			"case", Concat(caseAttributes.name, If(IsNull(customCaseAttributes), [], customCaseAttributes.Keys)),
			"event", eventAttributes.Name
		),
		"cases", cases.(
			Let("c", _),
			ToDictionary().Set(
				"n", c.Name,
				"s", c.caseSelectionCondition(),
				"a", Concat(caseAttributes.(Let("attr", _), c.Attribute(attr)), If(IsNull(customCaseAttributes), [], customCaseAttributes.Values.(Let("f", _), c.f()))),
				"t", c.Events.(
					Let("e", _),
					Concat(
						e.Type.Id,
						e.TimeStamp,
						(eventAttributes.(Let("attr", _), e.Attribute(attr)))
					)
				)
			)
		)
	).ToJson() + "\r\n"
));

Def("ExportCustom", "cases", "ignoredCaseAttributes", "ignoredEventAttributes", "caseGeneratorFunc", (
	Let("el", _),
	Let("caseAttributes", el.CaseAttributes.Where(Count(Intersect(ignoredCaseAttributes, [Name])) == 0)),
	Let("eventAttributes", el.EventAttributes.Where(Count(Intersect(ignoredEventAttributes, [Name])) == 0)),
	ToDictionary().Set(
		"activities", el.EventTypes.(
			Let("a", _),
			ToDictionary().Set(
				"name", a.Name,
				"id", a.Id
			)
		),
		"attributes", ToDictionary().Set(
			"case", caseAttributes.Name,
			"event", eventAttributes.Name
		),
		"cases", caseGeneratorFunc(cases, caseAttributes, eventAttributes)
	).ToJson() + "\r\n"
));

Def("ExportForPrediction", "cases", "caseSelectionCondition", "ignoredCaseAttributes", "ignoredEventAttributes", "customCaseAttributes", (
	Let("el", _),
	Let("caseAttributes", el.CaseAttributes.Where(Count(Intersect(ignoredCaseAttributes, [Name])) == 0)),
	Let("eventAttributes", el.EventAttributes.Where(Count(Intersect(ignoredEventAttributes, [Name])) == 0)),
	ToDictionary().Set(
		"cases", cases.(
			Let("c", _),
			ToDictionary().Set(
				"n", c.Name,
				"s", c.caseSelectionCondition(),
				"a", Concat(caseAttributes.(Let("attr", _), c.Attribute(attr)), If(IsNull(customCaseAttributes), [], customCaseAttributes.Values.(Let("f", _), c.f()))),
				"t", c.Events.(
					Let("e", _),
					Concat(
						e.Type.Id,
						e.TimeStamp,
						(eventAttributes.(Let("attr", _), e.Attribute(attr)))
					)
				)
			)
		)
	).ToJson() + "\r\n"
));


Def("ExportForNextEventTypePrediction", "cases", "ignoredCaseAttributes", "ignoredEventAttributes", (
	Let("el", _),
	Let("caseAttributes", el.CaseAttributes.Where(Count(Intersect(ignoredCaseAttributes, [Name])) == 0)),
	Let("eventAttributes", el.EventAttributes.Where(Count(Intersect(ignoredEventAttributes, [Name])) == 0)),
	ToDictionary().Set(
		"cases", ConcatTop(
			cases.(
				Let("c", _),
				ToDictionary().Set(
					"n", c.Name,
					"a", (caseAttributes.(Let("attr", _), c.Attribute(attr))),
					"t", c.Events.(
						Let("e", _),
						Concat(
							e.Type.Id,
							e.TimeStamp,
							(eventAttributes.(Let("attr", _), e.Attribute(attr)))
						)
					)
				)
			)
		)
	).ToJson() + "\r\n"
));

Def("TimeGroup", "percentiles", (
  _.Duration.TotalDays.(
    Let("d", _),
    Let("result", null),
	For("i", 0, IsNull(result) && (i < Count(percentiles)), i + 1, (
	  Set("result", d < percentiles[i] ? "D_" + Round(percentiles[i],1) : null)
    )),
	IsNull(result) ? "D_0" : result
  )
));
