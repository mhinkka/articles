Def("EscapeFilename", "filename", filename.Replace("\\", "\\\\"));
  
Def("Predict", "trainedModel", "testDataName", "testData", "selectionExpression", "outputFilename", (
	ParseJson(
		StartProcess("C:\\ProgramData\\Miniconda3\\python.exe", "D:\\dev\\aalto\\papers\\nn-predictions-extended\\src\\main.py --log_to_file_only --input_data_from_standard_input -m \"" + EscapeFilename(trainedModel) + "\"", testData)
	)
));

Def("PredictNextActivity", "el", "modelFilename", (
	Let("configuration", ToDictionary().Set(
		"runs", [
			ToDictionary().Set(
				"predict_next_activity", true,
				"predict_only", true,
				"write_input_to_file", true
			)
		]
	).ToJson() + "\r\n"),
	Let("testData", 
		el.ExportCustom(
			el.Cases, 
			[], 
			[], 
			Def("", "cases", "caseAttributes", "eventAttributes", 
				GetSimpleCasesForEventTypePrediction(cases, caseAttributes, eventAttributes)
			)
		)
	),
	Let("predictions", 
		ParseJson(
			StartProcess(
				"C:\\ProgramData\\Miniconda3\\python.exe", 
				"D:\\dev\\aalto\\papers\\nn-predictions-extended\\src\\main.py --log_to_file_only --configuration_from_standard_input --input_data_from_standard_input -m \"" + EscapeFilename(modelFilename) + "\"", 
				configuration + testData
			)
		)
	),
	Let("casesByCaseName", ToDictionary(
		ConcatTop(
			el.Cases.(Let("c", _), [Name: c])
		)
	)),
	ToDictionary(
		ConcatTop(
			predictions.Keys.(
				Let("key", _), 
				Let("jsonByKey", predictions.get(key)), 
				[
					key: [
						jsonByKey.get("outcome"), 
						jsonByKey.get("p"), 
						casesByCaseName.get(key)
					]
				]
			)
		)
	)
));
